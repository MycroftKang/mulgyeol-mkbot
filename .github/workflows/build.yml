name: Build and Test

on:
  push:
    branches:
      - main
      - release-*
  pull_request:
    branches:
      - main
      - release-*
# on: [push, pull_request]

jobs:
  build:
    name: build and test
    runs-on: windows-2019
    defaults:
      run:
        shell: cmd
    steps:
      - name: Cancel Previous Runs
        if: github.ref != 'refs/heads/main'
        uses: styfle/cancel-workflow-action@0.6.0
        with:
          access_token: ${{ github.token }}
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - uses: webfactory/ssh-agent@v0.5.1
        name: Install SSH key
        id: install-ssh
        continue-on-error: true
        with:
          ssh-private-key: ${{ secrets.DEPLOY_KEY }}
      - name: Install dependencies 1
        env:
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_TOKEN: ${{ secrets.DEPLOY_TOKEN }}
        run: |
          scripts\prepare.bat
          python -m pip install --upgrade pip
          pip install -r requirements.txt ; if ($LASTEXITCODE) { exit $LASTEXITCODE }
          if ($Env:DEPLOY_TOKEN) { pip install -U mulgyeol-oauthlib --index-url https://${Env:DEPLOY_USER}:${Env:DEPLOY_TOKEN}@gitlab.com/api/v4/projects/20530638/packages/pypi/simple --extra-index-url https://pypi.org/simple }
        shell: pwsh
      - name: Install dependencies 2
        if: steps.install-ssh.outcome == 'success'
        run: |
          pip install git+ssh://git@github.com/MycroftKang/application-insights-python.git
        shell: pwsh
      - name: Unit Test
        run: |
          python -m unittest discover -v -s tests -p test_*.py
      - name: Version
        env:
          API_KEY: ${{ secrets.API_KEY }}
        run: |
          python package/vc.py -gb ; if ($LASTEXITCODE) { exit $LASTEXITCODE }
          echo "mkbot_version=$(cat version.txt)" >> $env:GITHUB_ENV
          if ($Env:API_KEY) { echo $Env:API_KEY > src\lib\mgylabs\constants\APIKey.py }
        shell: pwsh
      - name: Build MK Bot
        run: |
          call scripts\build.bat
      - name: Test with dry run
        run: |
          mkdir $Env:USERPROFILE\.mkbot > $null
          mkdir "$Env:LOCALAPPDATA\Mulgyeol\Mulgyeol MK Bot" > $null
          cp -Path package\data -Destination "$Env:LOCALAPPDATA\Mulgyeol\Mulgyeol MK Bot" -Recurse
          cp -Path extensions -Destination $Env:USERPROFILE\.mkbot -Recurse
          cd .\build\bin
          .\MKBotCore.exe --dry-run
        shell: pwsh
      - name: Packaging
        run: |
          $Env:Path += ";C:\Program Files (x86)\NSIS\"
          makensis.exe /INPUTCHARSET UTF8 "/DPRODUCT_VERSION=${Env:mkbot_version}" "/DPRODUCT_NAME=Mulgyeol MK Bot" "/DPRODUCT_EXE=MKBot.exe" "/DEXT_DIR=.mkbot" package\MKBot.nsi
        shell: pwsh
